<!doctype html public "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
    <TITLE>Icon Programming Language Functions (E - J)</TITLE>
    <LINK REL="STYLESHEET" TYPE="text/css" HREF="istyle.css">
    <LINK REL="SHORTCUT ICON" HREF="shortcut.gif">
</HEAD><BODY>
<H2>Details of Icon Functions E through J</H2>
<HR>
<H3><A NAME = "entab">
entab (s1,i1,i2,...,in) : s2 -- insert tabs
</A></H3>

Produces a string based on s1 in which runs of blanks are replaced by
tabs.  Tab stops are at i1, i2, ..., in, with additional stops obtained
by repeating the last interval.

<PRE>
Default:
i1      9

See also: <A HREF = "funcad.htm#detab">detab()</A>
</PRE>
<HR>
<H3><A NAME = "errorclear">
errorclear () : n -- clear error indication
</A></H3>

Clears the indications of the last error.
<PRE>
See also: <A HREF = "keywlist.htm#keywords">&amp;error()</A>
</PRE>
<HR>
<H3><A NAME = "exit">
exit (i) -- exit program
</A></H3>

Terminates the program with exit status i.

<PRE>
Default:
i       normal exit (system dependent)

See also: <A HREF = "funcsz.htm#stop">stop()</A>
</PRE>
<HR>
<H3><A NAME = "exp">
exp (r1) : r2 -- compute exponential
</A></H3>

Produces e raised to the power r1.
<PRE>
See also: <A HREF = "funcko.htm#log">log()</A> and <A HREF = "infix1.htm#exponential">N1 ^ N2</A>
</PRE>
<HR>
<H3><A NAME = "find">
find (s1,s2,i1,i2) : i3,i4,...,in -- find string
</A></H3>

Generates the sequence of integer positions in s2 at which s1 occurs as
a substring in s2[i1:i2], but fails if there is no such position.

<PRE>
Defaults:
s2      &amp;subject
i1      &amp;pos if s2 defaulted, otherwise 1
i2      0

See also: <A HREF = "funcad.htm#bal">bal()</A>, <A HREF = "funcko.htm#match">match()</A>, and <A HREF = "funcsz.htm#upto">upto()</A>
</PRE>
<HR>
<H3><A NAME = "flush">
flush (f) : n -- flush I/O buffer
</A></H3>

Flushes the output buffers for f.
<HR>
<H3><A NAME = "function">
function () : s1,s2,...,sn -- generate function names
</A></H3>

Generates the names of the Icon (built-in) functions.
<HR>
<H3><A NAME = "get">
get (L) : x  -- get value from list
</A></H3>

Produces the leftmost element of L and removes it from L, but fails if
L is empty; synonym for pop(L).
<PRE>
See also: <A HREF = "funcpr.htm#pop">pop()</A>, <A HREF = "funcpr.htm#pull">pull()</A>, <A HREF = "funcpr.htm#push">push()</A>, and <A HREF = "funcpr.htm#put">put()</A>
</PRE>
<HR>
<H3><A NAME = "getch">
getch () : s  -- get keyboard character
</A></H3>

Waits until a character has been entered from the keyboard and then produces
the corresponding one-character string. The character is not displayed.
The function fails on an end of file.
<PRE>
See also: <A HREF = "#getche">getche()</A> and <A HREF = "funcko.htm#kbhit">kbhit()</A>
</PRE>
<HR>
<H3><A NAME = "getche">
getche () : s  -- get and echo keyboard character
</A></H3>

Waits until a character has been entered from the keyboard and then produces
the corresponding one-character string. The character is displayed.
The function fails on an end of file.
<PRE>
See also: <A HREF = "#getch">getch()</A> and <A HREF = "funcko.htm#kbhit">kbhit()</A>
</PRE>
<HR>
<H3><A NAME = "getenv">
getenv (s1) : s2 -- get value of environment variable
</A></H3>

Produces the value of environment variable s1, but fails if the
variable is not set or environment variables are not supported.
<HR>
<H3><A NAME = "iand">
iand (i1,i2) : i3 -- compute bit-wise <VAR>and</VAR>
</A></H3>

Produces the bitwise <VAR>and</VAR> of i1 and i2.
<PRE>
See also: <A HREF = "#icom">icom()</A>, <A HREF = "#ior">ior()</A>, <A HREF = "#ishift">ishift()</A>, and <A HREF = "#ixor">ixor()</A>
</PRE>
<HR>
<H3><A NAME = "icom">
icom (i1) : i2 -- compute bit-wise complement
</A></H3>

Produces the bitwise complement (1's complement) of i1.
<PRE>
See also: <A HREF = "#iand">iand()</A>, <A HREF = "#ior">ior()</A>, <A HREF = "#ishift">ishift()</A>, and <A HREF = "#ixor">ixor()</A>
</PRE>
<HR>
<H3><A NAME = "image">
image (x) : s -- produce string image
</A></H3>

Produces a string image of x.
<HR>
<H3><A NAME = "insert">
insert (X,x1,x2) : X -- insert element
</A></H3>

If X is a table, inserts the key x1 with value x2 into X.  If X is a
set, inserts x1 into X.  Produces X.

<PRE>
Default:
x2      &amp;null

See also: <A HREF = "funcad.htm#delete">delete()</A> and <A HREF = "funcko.htm#member">member()</A>
</PRE>
<HR>
<H3><A NAME = "integer">
integer (x) : i  -- convert to integer
</A></H3>

Produces the integer resulting from converting x, but fails if the
conversion is not possible.
<PRE>
See also: <A HREF = "funcko.htm#numeric">numeric()</A> and <A HREF = "funcpr.htm#real">real()</A>
</PRE>
<HR>
<H3><A NAME = "ior">
ior (i1,i2) : i3 -- compute bit-wise inclusive <VAR>or</VAR>
</A></H3>

Produces the bitwise inclusive <VAR>or</VAR> of i1 and i2
<PRE>
See also: <A HREF = "#iand">iand()</A>, <A HREF = "#icom">icom()</A>, <A HREF = "#ishift">ishift()</A>, and <A HREF = "#ixor">ixor()</A>
</PRE>
<HR>
<H3><A NAME = "ishift">
ishift (i1,i2) : i3  -- shift bits
</A></H3>

Produces the result of shifting the bits in i1 by i2 positions.
Positive values of i2 shift to the left, negative to the right.
Vacated bit positions are zero-filled.
<PRE>
See also: <A HREF = "#iand">iand()</A>, <A HREF = "#ior">ior()</A>, <A HREF = "#ior">ior()</A>, and <A HREF = "#ixor">ixor()</A>
</PRE>
<HR>
<H3><A NAME = "ixor">
ixor (i1,i2) : i3 -- compute bit-wise exclusive <VAR>or</VAR>
</A></H3>

Produces the bitwise exclusive <VAR>or</VAR> of i1 and i2.
<PRE>
See also: <A HREF = "#iand">iand()</A>, <A HREF = "#icom">icom()</A>, <A HREF = "#ior">ior()</A>, and <A HREF = "#ixor">ixor()</A>
</PRE>
</BODY></HTML>
