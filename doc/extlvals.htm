<!doctype html public "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
    <TITLE>Icon External Values</TITLE>
    <LINK REL="STYLESHEET" TYPE="text/css" HREF="istyle.css">
    <LINK REL="SHORTCUT ICON" HREF="shortcut.gif">
</HEAD>
<BODY>

<P><A HREF="http://www.cs.arizona.edu/icon/"> <IMG SRC="wwwcube.gif"
ALT="[Icon home]" WIDTH=128 HEIGHT=144 BORDER=0 ALIGN=RIGHT> </A>

<H1> Icon External Values </H1>

<P> Carl Sturtivant
<BR> <SMALL> Computer Science &amp; Engineering Department </SMALL>
<BR> <SMALL> University of Minnesota </SMALL>

<P> Gregg M. Townsend
<BR> <SMALL> Department of Computer Science </SMALL>
<BR> <SMALL> The University of Arizona </SMALL>

<P> <SMALL> www.cs.arizona.edu/icon/v950/extlvals.htm
<BR> 
Last updated October 26, 2009</SMALL>
<!-- $Id$ -->


<H2> Introduction </H2>


<P> External values provide a way for
<A HREF="cfuncs.htm">dynamically loaded C functions</A>
to create and return opaque data structures to an Icon program.
This allows state to be maintained across multiple calls of
external functions.

<P> The creation of an external value in C defines 
not just the data itself but also some related attributes.
These control the sorting behavior, image, and other such aspects.
Icon provides defaults and also adds a serial number
similar to those of lists, sets, and tables.

<P> The specification of attributes effectively creates a number
of distinct types.
Each external library can define the types it needs for its own purposes.
From an object-oriented perspective, these can be seen as subtypes
of a common <CODE>external</CODE> type.


<H2> External Values in an Icon Program </H2>

<P> External values are opaque to Icon. They are <EM>created</EM> only by
dynamically 
loaded C functions, any of which in turn may have access to their internals. In 
this way a library of Icon functions to work with a specific kind of external 
value is possible. However, such values can be seen and manipulated (assigned, 
passed to procedures or functions, sorted, copied, etc.) in Icon. The 
behavior of an external value in Icon may be modified to some extent by the 
implementation of the dynamically loaded function that is used to create it, as 
described below.

<P> In what follows let <CODE>E</CODE>, <CODE>E1</CODE>, and <CODE>E2</CODE>
be external values
produced by some external function or functions. Icon prescribes the following 
default behavior of such values, which is exhibited if the functions that 
created them did not override such at the time of creation. Otherwise behavior 
in the following contexts is determined by the external values' creators.

<P> External values always sort after values of all other types, and this 
cannot be overridden by the creators of such values. Within themselves external 
values are first sorted by type name (which is a set by the creator, is 
returned by the Icon function 'type' and specifies a subtype of the external 
type). The default sort within such a subtype is by serial number. Only sorting 
within a subtype (i.e., externals with a specific type name) can be overridden 
by the creator. See the next section for a description of the relevant C 
internals. The default behavior follows.

<BLOCKQUOTE><DL>
<DT><CODE>type(E)</CODE>
	<DD>returns the string <CODE>"external"</CODE>
<DT><CODE>image(E)</CODE>
	<DD>returns a string indicating the type, serial number,
	and the hexadecimal value of the first or only data word
	<I>e.g.</I> <CODE>"external_3(67A04F35)"</CODE>
<DT><CODE>copy(E)</CODE>
	<DD>returns <CODE>E</CODE> itself without copying
<DT><CODE>sort()</CODE>
	<DD>external values sort first by type name and then by serial number
<DT><CODE>E1 === E2</CODE>	
	<DD>produces <CODE>E1</CODE> when <CODE>E1</CODE> and <CODE>E2</CODE>
	are the same external object; otherwise fails
<DT><CODE>E1 ~=== E2</CODE>
	<DD>produces <CODE>E2</CODE> when <CODE>E1</CODE> and <CODE>E2</CODE>
	are distinct; otherwise fails
</DL></BLOCKQUOTE>
	
	
<H2> Creating and Using External Values in C </H2>

<P>These next sections describe the C interface for a reader who is
familiar with the use of external functions.

<P> An Icon external value is implemented by a descriptor that points
to an external block containing several components.
The data area and the function list are the most important of these.

<P> An integer word count indicates the size of the data area.
This is specified when the external block is created.
Often external data is a single pointer (handle) and so only one word is 
required. The content of the first word of the data block is used in the 
default image, as described in the previous section.

<P> The function list allows the programmer to override,
at the granularity of each individual data value,
the default behaviors listed in the previous section.
The list is a callback table pointing to programmer-defined C functions
as described in more detail below.
The function list also acts as a unique type identifier, because external
values with different function lists behave as values of distinct type.

<P> A dynamically loaded C function allocates an external value by including
<CODE>ipl/cfuncs/icall.h</CODE> and calling <CODE>alcexternal</CODE>:

<BLOCKQUOTE>
<DL>
<DT>
external_block *alcexternal(size_t size, word *data, function_list *funcs)
</DT><DD>
	Allocates and returns a pointer to an external block where size 
specifies the number of bytes in the entire external block (and by implication 
the number of words in the data block inside it) and funcs specifies the 
location of the function list (described in detail in the next section).
If funcs is NULL, the external value will exhibit default behavior.
</DD></DL>
</BLOCKQUOTE>

<P> The 
words pointed to by data are successively copied into the data block until the 
latter is full. This might typically be called as
<BLOCKQUOTE>
    blk = alcexternal(sizeof(external_block) + n * sizeof(word), data, funcs); 
</BLOCKQUOTE>
The result is returned to Icon by the macro call
<CODE>RetExternal(</CODE><VAR>blk</VAR><CODE>)</CODE>.
The block may eventually be freed by garbage collection if it
is not saved or if it later becomes inaccessable to the Icon program.

<P>A more complete example is found in the file
<CODE>ipl/cfuncs/external.c</CODE>.

	
<H2> The Function List Passed to alcexternal </H2>

<P> The function list is reminiscent of a "dispatch table" or "class pointer" 
for dynamic method calls in an implementation of an object oriented programming 
language. Indeed an Icon external value is very much like a traditional object 
with its own data and methods. Typically such a function list would be static 
and shared among many Icon external values of the same kind ("class" or "type").

<P> If the programmer does not wish to override any of the default Icon 
behavior, then there may be no function block, represented by passing NULL to 
alcexternal. If the programmer desires not to override a particular behavior, 
then a NULL may be incorporated into the function list in the appropriate place 
instead of a valid function pointer. The Icon run-time system will then 
automatically call the corresponding default function when necessary.
	
<P> The type function_list is a struct with entries for pointers to functions 
of the following prototypes. These programmer-defined functions
replace the default behavior described earlier in this document.
In all cases argv is a pointer to one (usually) or two (for extcmp) external
values associated with this function list, and argc is 1 or 2 respectively.

<BLOCKQUOTE>
<DL>

<DT>
descriptor extcmp(int argc, descriptor *argv)	
</DT><DD>
<CODE>extcmp</CODE> returns an Icon integer
for use in sorting two external values that both have this function list
and are therefore considered to be of the same external subtype.
The function result should be negative if the first external value is
deemed less than the second, zero if they are deemed equal, and positive
if the first is deemed greater than the second.
This overrides the default behavior of the <CODE>sort</CODE> function
which compares serial numbers.
</DD>

<DT>
descriptor extcopy(int argc, descriptor *argv)
</DT><DD>
<CODE>extcopy</CODE> returns an external value defined
as a copy of its argument. 
This overrides the default behavior of the <CODE>copy</CODE> function,
which is to return another reference to the external value without copying.
</DD>

<DT>
descriptor extname(int argc, descriptor *argv)
</DT><DD>
<CODE>extname</CODE> returns an Icon string naming the type of the external value.
This overrides the default behavior of the <CODE>type</CODE> function, and thus
also affects the ordering relative to other external values when sorting.
</DD>

<DT>
descriptor extimage(int argc, descriptor *argv)
</DT><DD>
<CODE>extimage</CODE>
returns an Icon string to serve as the image of the external value.
This overrides the default behavior of the <CODE>image</CODE> function.
</DD>

</DL>
</BLOCKQUOTE>
	

<H2> Implementation Details </H2>

<SMALL>This section supplements the Icon
<A HREF="http://www.cs.arizona.edu/icon/ibsale.htm">
implementation book</A>.</SMALL>

<P> A descriptor of the external type has a vword containing the bit pattern 
D_External which contains the bits T_External indicating the external type, 
along with the bit F_Nqual indicating that the value is not a string and the 
bit F_Ptr indicating to the garbage collector that the dword is a pointer that 
needs tending. The dword contains a pointer to an external_block. This block is 
implemented as a C struct with a pointer to a function_block C struct as 
follows. The types word and descriptor are defined in ipl/cfuncs/icall.h.
	
<PRE>
typedef struct function_list { /* list of user defined callbacks */
	descriptor (*extcmp)   (int argc, descriptor *argv);
	descriptor (*extcopy)  (int argc, descriptor *argv);
	descriptor (*extname)  (int argc, descriptor *argv);
	descriptor (*extimage) (int argc, descriptor *argv);
} function_block;	

typedef struct b_external {
	word header;		/* the block type */
	size_t size;		/* the number of bytes in the block */
	long id;		/* the serial number */
	function_list *funcs;	/* pointer to the callback list */
	word data[1];		/* words of custom data, may be more than 1 */
} external_block;
</PRE>

<P> A call of alcexternal initializes all fields of an external block.
Data is copied without interpretation, and the function
list pointer is stored.  The header is assigned an appropriate constant for the 
garbage collector, and the size is set. alcexternal maintains a static 
count of the number of external_blocks allocated, and this is incremented and 
assigned to id.

<P> The following error code numbers are assigned for use with external values:
<BLOCKQUOTE><TABLE>
<TR><TH>errno<TH>errtext<TH>meaning
<TR><TD><CODE>131</CODE><TD><CODE>external expected</CODE>
    <TD>not an external value
<TR><TD><CODE>132</CODE><TD><CODE>incorrect external type</CODE>
    <TD>external of wrong flavor
<TR><TD><CODE>133</CODE><TD><CODE>invalid external value</CODE>
    <TD>right flavor in wrong context
<TR><TD><CODE>134</CODE><TD><CODE>malformed external value</CODE>
    <TD>data is bogus, not just inappropriate
</TABLE></BLOCKQUOTE>

<P> <HR>

</BODY>
</HTML>
