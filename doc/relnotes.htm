<!doctype html public "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
    <TITLE>Release Notes for Version 9.5 of Icon</TITLE>
    <LINK REL="STYLESHEET" TYPE="text/css" HREF="istyle.css">
    <LINK REL="SHORTCUT ICON" HREF="shortcut.gif">
</HEAD>
<BODY>

<P><A HREF="http://www.cs.arizona.edu/icon/"> <IMG SRC="wwwcube.gif"
ALT="[Icon home]" WIDTH=128 HEIGHT=144 BORDER=0 ALIGN=RIGHT> </A>

<H1> Release Notes for Version 9.5 of Icon </H1>

<P> Gregg M. Townsend
<BR> <SMALL> Department of Computer Science </SMALL>
<BR> <SMALL> The University of Arizona </SMALL>

<P> <SMALL> www.cs.arizona.edu/icon/v950/relnotes.htm
<BR> Last updated November 16, 2009</SMALL>
<!-- $Id$ -->


<P><B><I>These notes are preliminary and incomplete.</I></B>


<H2> Introduction </H2>

<P> Version 9.5.0 of Icon is an update of version 9.4.3 of Icon. 
It incorporates configuration, documentation, and library changes.
Some minor bugs have been fixed.
Support has been added for "external values" created by
user C functions.


<H2> Changes in version 9.5 </H2>

<P> Notable changes in this latest version are listed here.
Some code cleanup work and documentation editing
has also been done.

<H3> External Values </H3>

<P> External code incorporated by <CODE>loadfunc()</CODE> can now create
and return to Icon code opaque values that can be stored and passed
on subsequent calls.
This is similar to a feature of the early Macintosh ProIcon implementation.
See <A HREF=extlvals.htm>External Values</A> for more information.

<H3> Build Environment </H3>

<P> This version of Icon is the first to deliberately move beyond the
1989 C standard and make use of features of the 1999 C standard,
specifically the "struct hack".
Consequently, a C99 (or newer) compiler is now required to build Icon.

<H3> Cygwin Configuration </H3>

<P> The <CODE>cygwin</CODE> configuration has improved, partially through
removal of unneeded special cases now that Cygwin better approximates Unix.
External functions can now be loaded using <CODE>loadfunc()</CODE>.

<P> In addition to the <CODE>cygwin</CODE> configuration, which uses
Windows graphics, there is now a new <CODE>xcygwin</CODE> configuration
that uses the X window system.

<H3> Implementation Cleanup</H3>

<P> Large amounts of conditionalized dead code, including the old Icon
compiler, have been removed from the source code.

<P> All platforms now use POSIX threads for context switching instead of
system- and processor-dependent assembly language code.

<H3> Minor Fixes </H3>

<P> The <CODE>loadfunc()</CODE> implementation now specifies to the system
that C globals are to be shared with and among loaded functions.

<P> The command <CODE>icon nonexistent.icn</CODE> no longer leaves debris
in the /tmp directory.

<P> The maximum length of a file name has been increased from 256 to 512
characters.

<P> Table copying in the Sparc (Solaris) configuration was fixed by
coding a workaround to avoid a GCC 4.2.2 structure assignment bug.

<H3> Library changes </H3>

<P> As usual, some files in the Icon program library have been
added or edited, but the core library files remain stable.
Notable changes include:

<PRE>
procs/printf	Rewrite parts to fix several bugs, and add test.
procs/random	Improve thoroughness of randomize().

progs/diffsum	Handle output of "cvs diff".
progs/unclog	Handle CVS branches; fix indentation.
progs/weblinks	Add option to sort output by referencing page.

gprogs/gallery	Treat -wnnn and -hnnn options as *minimums*.
gprogs/gallery	Handle spaces embedded in JPEG filenames.
gprogs/spider	Add shortcuts, opt-in logging, congratulatory display.
gpacks/weaving	Add "halftone" weaving program htweav.icn.
</PRE>

<H3> Documentation Additions </H3>

<P> Two new documentation pages, <A HREF="cfuncs.htm">Loading C functions</A>
and <A HREF="extlvals.htm">External Values</A>, have been added.


<H2> Earlier feature additions </H2>

<P> These features appeared in earlier releases of Icon
but subsequent to publication of the Icon books.

<H3> Millions of colors </H3>
<SMALL> (new with version 9.4.2 of Icon) </SMALL>

<P> Icon's X-windows interface no longer limits each window to
256 colors at one time.
Median-cut quantization selects image colors when writing a GIF file.

<H3> Scriptable source files </H3>
<SMALL> (new with version 9.4.1 of Icon) </SMALL>

<P> An Icon source file can be made executable under Unix by prefixing it
with a comment line
<BLOCKQUOTE><CODE>#!/usr/bin/env icon</CODE></BLOCKQUOTE>
and setting its execute permission bit.
This uses a new <A HREF="icon.txt"><CODE>icon</CODE></A> command,
which in another form allows a small Icon program to be embedded
within a shell script.
See the <A HREF="icon.txt">man page</A> for details.
The traditional <A HREF="icont.txt"><CODE>icont</CODE></A> command
remains available when more flexibility is needed.

<H3> Path searching </H3>
<SMALL> (new with version 9.4.0 of Icon) </SMALL>

<P> Under Unix, colons (<CODE>:</CODE>) may now separate directories in the
<CODE>LPATH</CODE> and <CODE>IPATH</CODE> environment variables as an
alternative to spaces.
The Icon translator and linker search these paths when looking for
<CODE>$include</CODE> and <CODE>link</CODE> files respectively.

<P> The Icon program library is now searched automatically, but
<CODE>LPATH</CODE> and <CODE>IPATH</CODE> can still be set to control
the search order.
The effective path in each case is:
<OL>
	<LI> The current directory
	<LI> Any directories named by the environment variable
	<LI> The Icon library directory
</OL>

<P> Other changes affect the configuration of Icon at installation time
and the way executable Icon programs locate the interpreter.
These changes, which are transparent to most users, are discussed
in more detail on the <A HREF="files.htm">File Organization</A> page.

<H3> Reading directory contents </H3>
<SMALL> (new with version 9.3.2 of Icon) </SMALL>

<P> The files in a directory can be listed by opening the directory as a file.
Subsequent reads return the names of the files contained in the directory.
The names are returned in no particular order, and for Unix, the directories 
<CODE>"."</CODE> and <CODE>".."</CODE> are included.

<H3> Reading foreign text files </H3> 
<SMALL> (new with version 9.3.1 of Icon) </SMALL>

<P> The function <CODE>read()</CODE> recognizes
three kinds of line terminators when reading a file
opened in translated mode:
Windows (CR+LF), Macintosh (CR), or Unix (LF).
Consequently, text files created on one platform can be
read by an Icon program running on a different platform. 


<H2> Limitations, bugs, and problems </H2>

<P> Large integers cannot be used with <CODE>i to j</CODE>,
with <CODE>seq()</CODE>, or with integer-valued keywords.

<P> Large-integer literals are constructed at run-time, so such
literals are best kept outside of loops.

<P> Conversion of a large integer to a string is quadratic
in the length of the integer.
Conversion of a very large integer may take a long time.

<P> An "evaluation stack overflow" can occur when a procedure is called
with a huge number (thousands or more) of arguments.
The capacity can be increased by setting the environment variable
<CODE>MSTKSIZE</CODE> or <CODE>COEXPSIZE</CODE>, as appropriate.

<P> Stack overflow checking uses a heuristic that is not always effective.
Stack overflow in a co-expression is especially likely to escape
detection and cause a mysterious program malfunction. 

<P> Pathologically nested structures can provoke a memory or segmentation
fault during garbage collection by reaching the stack limit.
The stack limit can be raised by the 
<CODE>limit</CODE> or <CODE>ulimit</CODE> shell command.


<P> If an expression such as <CODE> x := create <VAR>expr</VAR></CODE>
is used in a loop, and <CODE>x</CODE> is not a global variable,
uncollectable co-expressions accumulate with each iteration.
This problem can be circumvented by making <CODE>x</CODE>
a global variable or by assigning a value to <CODE>x</CODE>
before the create operation, as in 
    <BLOCKQUOTE><CODE>
	x := &amp;null <BR>
	x := create <VAR>expr</VAR>
    </CODE></BLOCKQUOTE>

<P> Integer overflow on exponentiation may not be detected during execution.
Such overflow may occur during type conversion.


<H2> Documentation </H2>

<P> See the <A HREF=docguide.htm>documentation guide</A>
for an overview of the available Icon documentation.

<P> For installation instructions, see
<A HREF=install.htm>Installing Binaries</A> or
<A HREF=build.htm>Building from Source</A> as appropriate.


<H2> Acknowledgments </H2>

<P> Carl Sturtivant inspired and participated in the development
of external values.
Carl Sturtivant and Steve Waldo supplied numerous Cygwin improvements.
Cheyenne Wills enhanced configuration flexibility.
Clint Jeffery fixed an ancient linking bug.

<P> <HR>

</BODY>
</HTML>
