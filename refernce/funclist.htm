<!doctype html public "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
    <TITLE>Icon Programming Language Functions</TITLE>
    <LINK REL="STYLESHEET" TYPE="text/css" HREF="../istyle.css">
</HEAD>
<BODY>
<H2><A NAME="functions"></A>Functions </H2>
<H6><A HREF="ref.htm">[Back to contents page]</A></H6>
Functions and datatypes of arguments and produced values: 
<PRE>
abs(N) : N                              # <A HREF="funcad.htm#abs">compute absolute value</A>
acos(r1) : r2                           # <A HREF="funcad.htm#acos">compute arc cosine</A>
any(c,s,i1,i2) : i3                     # <A HREF="funcad.htm#any">locate initial character</A>
args(p) : i                             # <A HREF="funcad.htm#args">get number of procedure arguments</A>
asin (r1) : r2                          # <A HREF="funcad.htm#asin">compute arc sine</A>
atan (r1,r2) : r3                       # <A HREF="funcad.htm#atan">compute arc tangent</A>
bal(c1,c2,c3,s,i1,i2) : i3,i4,...,in    # <A HREF="funcad.htm#bal">locate balanced characters</A>
callout(x,x1,x2,...,xn) : xm            # <A HREF="funcad.htm#callout">call external function</A>
center(s1,i,s2) : s3                    # <A HREF="funcad.htm#center">position string at center</A>
char(i) : s                             # <A HREF="funcad.htm#char">produce character</A>
chdir(s) : n                            # <A HREF="funcad.htm#chdir">change directory</A>
close(f) : f                            # <A HREF="funcad.htm#close">close file</A>
collect(i1,i2) : n                      # <A HREF="funcad.htm#collect">perform garbage collection</A>
copy(x1) : x2                           # <A HREF="funcad.htm#copy">copy value</A>
cos(r1) : r2                            # <A HREF="funcad.htm#cos">compute cosine</A>
cset(x)                                 # <A HREF="funcad.htm#cset">convert to cset</A>
delay(i) : n                            # <A HREF="funcad.htm#delay">delay execution</A>
delete(X,x) : X                         # <A HREF="funcad.htm#delete">delete element</A>
detab(s1,i1,i2,...,in) : s2             # <A HREF="funcad.htm#detab">remove tabs</A>
display(i,f) : n                        # <A HREF="funcad.htm#display">display variables</A>
dtor(r1) : r2                           # <A HREF="funcad.htm#dtor">convert degrees to radians</A>
entab(s1,i1,i2,...,in) : s2             # <A HREF="funcej.htm#entab">insert tabs</A>
errorclear() : n                        # <A HREF="funcej.htm#errorclear">clear error indication</A>
exit(i)                                 # <A HREF="funcej.htm#exit">exit program</A>
exp(r1) : r2                            # <A HREF="funcej.htm#exp">compute exponential</A>
find(s1,s2,i1,i2) : i3,i4,...,in        # <A HREF="funcej.htm#find">find string</A>
flush(f) : n                            # <A HREF="funcej.htm#flush">flush I/O buffer</A>
function() : s1,s2,...,sn               # <A HREF="funcej.htm#function">generate function names</A>
get(L) : x                              # <A HREF="funcej.htm#get">get value from list</A>
getch() : s                             # <A HREF="funcej.htm#getch">get keyboard character</A>
getche() : s                            # <A HREF="funcej.htm#getche">get and echo keyboard character</A>
getenv(s1) : s2                         # <A HREF="funcej.htm#getenv">get value of environment variable</A>
iand(i1,i2) : i3                        # <A HREF="funcej.htm#iand">compute bit-wise <VAR>and</VAR></A>
icom(i1) : i2                           # <A HREF="funcej.htm#icom">compute bit-wise complement</A>
image(x) : s                            # <A HREF="funcej.htm#image">produce string image</A>
insert(X,x1,x2) : X                     # <A HREF="funcej.htm#insert">insert element</A>
integer(x) : i                          # <A HREF="funcej.htm#integer">convert to integer</A>
ior(i1,i2) : i3                         # <A HREF="funcej.htm#ior">compute bit-wise inclusive <VAR>or</VAR></A>
ishift(i1,i2) : i3                      # <A HREF="funcej.htm#ishift">shift bits</A>
ixor(i1,i2) : i3                        # <A HREF="funcej.htm#ixor">compute bit-wise exclusive <VAR>or</VAR></A>
kbhit() : n                             # <A HREF="funcko.htm#kbhit">check for keyboard character</A>
key(T) : x1,x2,...,xn                   # <A HREF="funcko.htm#key">generate keys from table</A>
left(s1,i,s2) : s3                      # <A HREF="funcko.htm#left">position string at left</A>
list(i,x) : L                           # <A HREF="funcko.htm#list">create list</A>
loadfunc (s1,s2) : p                    # <A HREF="funcko.htm#loadfunc">load external function</A>
log(r1,r2) : r3                         # <A HREF="funcko.htm#log">compute logarithm</A>
many(c,s,i1,i2) : i3                    # <A HREF="funcko.htm#many">locate many characters</A>
map(s1,s2,s3) : s4                      # <A HREF="funcko.htm#map">map characters</A>
match(s1,s2,i1,i2) : i3                 # <A HREF="funcko.htm#match">match initial string</A>
member(X,x) : x                         # <A HREF="funcko.htm#member">test for membership</A>
move(i) : s                             # <A HREF="funcko.htm#move">move scanning position</A>
name(x) : s                             # <A HREF="funcko.htm#name">produce name</A>
numeric(x) : N                          # <A HREF="funcko.htm#numeric">convert to numeric</A>
open(s1,s2) : f                         # <A HREF="funcko.htm#open">open file</A>
ord(s) : i                              # <A HREF="funcko.htm#ord">produce ordinal</A>
pop(L) : x                              # <A HREF="funcpr.htm#pop">pop from list</A>
pos(i1) : i2                            # <A HREF="funcpr.htm#pos">test scanning position</A>
proc(x,i) : p                           # <A HREF="funcpr.htm#proc">convert to procedure</A>
pull(L) : x                             # <A HREF="funcpr.htm#pull">pull from list</A>
push(L,x1,x2,...,xn) : L                # <A HREF="funcpr.htm#push">push onto list</A>
put(L,x1,x2,...,xn) : L                 # <A HREF="funcpr.htm#put">put onto list</A>
read(f) : s                             # <A HREF="funcpr.htm#read">read line</A>
reads(f,i) : s                          # <A HREF="funcpr.htm#reads">read string</A>
real(x) : r                             # <A HREF="funcpr.htm#real">convert to real</A>
remove(s) : n                           # <A HREF="funcpr.htm#remove">remove file</A>
rename(s1,s2) : n                       # <A HREF="funcpr.htm#rename">rename file</A>
repl(s1,i) : s2                         # <A HREF="funcpr.htm#repl">replicate string</A>
reverse(s1) : s2                        # <A HREF="funcpr.htm#reverse">reverse string</A>
right(s1,i,s2) : s3                     # <A HREF="funcpr.htm#right">position string at right</A>
rtod(r1) : r2                           # <A HREF="funcpr.htm#rtod">convert radians to degrees</A>
runerr(i,x)                             # <A HREF="funcpr.htm#runerr">terminate with run-time error</A>
save(s) : i                             # <A HREF="funcsz.htm#save">save executable image</A>
seek(f,i) : f                           # <A HREF="funcsz.htm#seek">seek to position in file</A>
seq(i1,i2) : i3,i4,...                  # <A HREF="funcsz.htm#seq">generate sequence of integers</A>
set(L) : S                              # <A HREF="funcsz.htm#set">create set</A>
sin(r1) : r2                            # <A HREF="funcsz.htm#sin">compute sine</A>
sort(X,i) : L                           # <A HREF="funcsz.htm#sort">sort structure</A>
sortf(X,i) : L                          # <A HREF="funcsz.htm#sortf">sort list or set by field</A>
sqrt(r1) : r2                           # <A HREF="funcsz.htm#sqrt">compute square root</A>
stop(x1,x2,...,xn)                      # <A HREF="funcsz.htm#stop">stop execution</A>
string(x) : s                           # <A HREF="funcsz.htm#string">convert to string</A>
system(s) : i                           # <A HREF="funcsz.htm#system">call system function</A>
tab(i) : s                              # <A HREF="funcsz.htm#tab">set scanning position</A>
table(x) : T                            # <A HREF="funcsz.htm#table">create table</A>
tan(r1) : r2                            # <A HREF="funcsz.htm#tan">compute tangent</A>
trim(s1,c) : s2                         # <A HREF="funcsz.htm#trim">trim string</A>
type(x) : s                             # <A HREF="funcsz.htm#type">produce type name</A>
upto(c,s,i1,i2) : i3,i4,...,in          # <A HREF="funcsz.htm#upto">locate characters</A>
variable(s) : x                         # <A HREF="funcsz.htm#variable">produce variable</A>
where(f) : i                            # <A HREF="funcsz.htm#where">produce position in file</A>
write(x1,x2,...,xn) : xn                # <A HREF="funcsz.htm#write">write line</A>
writes(x1,x2,...,xn)                    # <A HREF="funcsz.htm#writes">write string</A></PRE>
<H6><A HREF="ref.htm">[Back to contents page]</A></H6>
</BODY>
</HTML>
