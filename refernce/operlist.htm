<!doctype html public "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
    <TITLE>Icon Programming Language Operations</TITLE>
    <LINK REL="STYLESHEET" TYPE="text/css" HREF="istyle.css">
    <LINK REL="SHORTCUT ICON" HREF="shortcut.gif">
</HEAD>
<BODY>
<H2><A NAME="operations"></A>Operations and required datatypes </H2>
<H6><A HREF="ref.htm">[Back to contents page]</A></H6>
<PRE>
prefix operations

        +N : N                          # <A HREF="prefix.htm#positive">compute positive</A>
        -N : N                          # <A HREF="prefix.htm#negative">compute negative</A>
        ~c1 : c2                        # <A HREF="prefix.htm#complement">compute cset complement</A>
        =s1 : s2                        # <A HREF="prefix.htm#tab_match">match string in scanning</A>
        @C : x                          # <A HREF="prefix.htm#activate">activate co-expression</A>
        ^C1 : C2                        # <A HREF="prefix.htm#refresh">create refreshed co-expression</A>
        *x : i                          # <A HREF="prefix.htm#size">compute size</A>
        ?x1 : x2                        # <A HREF="prefix.htm#random">generate random value</A>
        !x : x1,x2,...,xn               # <A HREF="prefix.htm#values">generate values</A>
        /x : x                          # <A HREF="prefix.htm#null">check for null value</A>
        \x : x                          # <A HREF="prefix.htm#nonnull">check for non-null value</A>
        .x : x                          # <A HREF="prefix.htm#dereference">dereference variable</A>

infix operations

        N1 + N2 : N3                    # <A HREF="infix1.htm#sum">compute sum</A>
        N1 - N2 : N3                    # <A HREF="infix1.htm#difference">compute difference</A>
        N1 * N2 : N3                    # <A HREF="infix1.htm#product">compute product</A>
        N1 / N2 : N3                    # <A HREF="infix1.htm#quotient">compute quotient</A>
        N1 % N2 : N3                    # <A HREF="infix1.htm#remainder">compute remainder</A>
        N1 ^ N2 : N3                    # <A HREF="infix1.htm#exponential">compute exponential</A>
        x1 ++ x2 : x3                   # <A HREF="infix1.htm#union">compute cset or set union</A>
        x1 -- x2 : x3                   # <A HREF="infix1.htm#set_difference">compute cset or set difference</A>
        x1 ** x2 : x3                   # <A HREF="infix1.htm#intersection">compute cset or set intersection</A>
        s1 || s2 : s3                   # <A HREF="infix1.htm#concatenation">concatenate strings</A>
        L1 ||| L2 : L3                  # <A HREF="infix1.htm#list_concatenation">concatenate lists</A>
        R.F : x                         # <A HREF="infix1.htm#field">get field of record</A>
        x1 @ C : x2                     # <A HREF="infix1.htm#transmit">transmission value to co-expression</A>
        x1 &amp; x2 : x2                    # <A HREF="infix1.htm#conjunction">evaluate in conjunction</A>
        N1 &lt; N2 : N2                    # <A HREF="infix1.htm#num_lt">compare numerically</A>
        N1 &lt;= N2 : N2                   # <A HREF="infix1.htm#num_le">compare numerically</A>
        N1 = N2 : N2                    # <A HREF="infix1.htm#num_eq">compare numerically</A>
        N1 &gt;= N2 : N2                   # <A HREF="infix1.htm#num_ge">compare numerically</A>
        N1 &gt; N2 : N2                    # <A HREF="infix1.htm#num_gt">compare numerically</A>
        N1 ~= N2 : N2                   # <A HREF="infix1.htm#num_ne">compare numerically</A>
        s1 &lt;&lt; s2 : s2                   # <A HREF="infix1.htm#str_lt">compare lexically</A>
        s1 &lt;&lt;= s2 : s2                  # <A HREF="infix1.htm#str_le">compare lexically</A>
        s1 == s2 : s2                   # <A HREF="infix1.htm#str_eq">compare lexically</A>
        s1 &gt;&gt;= s2 : s2                  # <A HREF="infix1.htm#str_ge">compare lexically</A>
        s1 &gt;&gt; s2 : s2                   # <A HREF="infix1.htm#str_gt">compare lexically</A>
        s1 ~== s2 : s2                  # <A HREF="infix1.htm#str_ne">compare lexically</A>
        x1 === x2 : x2                  # <A HREF="infix1.htm#val_eq">compare values</A>
        x1 ~=== x2 : x2                 # <A HREF="infix1.htm#val_ne">compare values</A>
        x1 := x2 : x1                   # <A HREF="infix2.htm#assign">assign value</A>
        x1 op:= x2 : x1                 # <A HREF="infix2.htm#aug_assign">augmented assignment</A>
        x1 :=: x2 : x1                  # <A HREF="infix2.htm#exchange">exchange values</A>
        x1 &lt;- x2 : x1                   # <A HREF="infix2.htm#rev_assign">assign value reversibly</A>
        x1 &lt;-&gt; x2 : x1                  # <A HREF="infix2.htm#rev_exchange">exchange values reversibly</A></PRE>
<H6><A HREF="ref.htm">[Back to contents page]</A></H6>
</BODY>
</HTML>
