<!doctype html public "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<TITLE>Icon Programming Language Operations (infix 3)</TITLE>
<LINK REL="STYLESHEET" TYPE="text/css" HREF="../istyle.css">
</HEAD><BODY>
<H2>Details of Icon Infix Operations (part 3)</H2>
<H6><A HREF = "ref.htm">[Back to contents page]</A></H6>
<HR>
<H3><A NAME = "invoke">
x(x1, x2, ..., xn) : xm -- process argument list
</A></H3>

If x is a function or procedure, x(x1, x2, ..., xn) produces the outcome of
calling x with arguments x1, x2, ..., xn.<P>

If x is an integer, x(x1, x2, ..., xn) produces the outcome of xi, but fails if
i is out of the range 1, ..., n.  In this case, it produces a variable if xi is
a variable; i may be nonpositive.
<PRE>
See also: <A HREF = "#invoke_list">x!L</A>
</PRE>
<HR>
<H3><A NAME = "invoke_list">
x!L -- process argument list
</A></H3>

If x is a function or procedure, x!L produces the outcome of
calling x with the arguments in the list L.  If x is an integer, x!L produces
L[x] but fails if x is out of range of L.
<PRE>
See also: <A HREF = "#invoke">x(...)</A>
</PRE>
<HR>
<H3><A NAME = "invoke_coexpr">
x{x1, x2, ..., xn} : xm -- process argument list as co-expressions
</A></H3>

x{x1, x2, ..., xn} is equivalent to x([create x1, create x2, ... create xn]).
<PRE>
See also:       <A HREF = "#invoke">x(...)</A>, <A HREF = "#create">create <var>expr</var></A>
</PRE>
<HR>
<H3><A NAME = "break">
break <VAR>expr</VAR> : x -- break out of loop
</A></H3>

break <VAR>expr</VAR> exits from the enclosing loop and produces the outcome
of expr.
<PRE>
Default:
<VAR>expr</VAR> &amp;null

See also:       <A HREF = "#next">next</A>
</PRE>
<HR>
<H3><A NAME = "case">
case <VAR>expr</VAR> of {...} : x -- select according to value
</A></H3>

case <VAR>expr</VAR> of {...} produces the outcome of the <CODE>case</CODE>
clause that is selected by the value of <VAR>expr</VAR>.
<HR>
<H3><A NAME = "create co-expression">
create <VAR>expr</VAR> : C -- create co-expression
</A></H3>

create <VAR>expr</VAR> produces a co-expression for <VAR>expr</VAR>.
<HR>
<H3><A NAME = "every">
every <VAR>expr1</VAR> do <VAR>expr2</VAR> -- generate every result
</A></H3>

every <VAR>expr1</VAR> do <VAR>expr2</VAR> evaluates <VAR>expr2</VAR> for each
result generated by <VAR>expr1</VAR>; it fails when <VAR>expr1</VAR> does
not produce a result.  The <CODE>do</CODE> clause is optional.
<HR>
<H3><A NAME = "fail">
fail -- fail from procedure
</A></H3>

fail returns from the current procedure, causing the call to fail.
<HR>
<H3><A NAME = "if">
if <VAR>expr1</VAR> then <VAR>expr2</VAR> else <VAR>expr3</VAR> : x
 -- select according to outcome
</A></H3>

if <VAR>expr1</VAR> then <VAR>expr2</VAR> else <VAR>expr3</VAR> produces the
outcome of <VAR>expr2</VAR> if <VAR>expr1</VAR> succeeds, otherwise the outcome
of <VAR>expr3</VAR>.  The <CODE>else</CODE> clause is optional.
<HR>
<H3><A NAME = "next">
next -- go to beginning of loop
</A></H3>

next transfers control to the beginning of the enclosing loop.
<HR>
<H3><A NAME = "not">
not <VAR>expr</VAR> : n -- invert failure
</A></H3>

not <VAR>expr</VAR> produces the null value if <VAR>expr</VAR> fails,
but fails if <VAR>expr</VAR> succeeds.
<HR>
<H3><A NAME = "repeat">
repeat <VAR>expr</VAR> -- evaluate repeatedly
</A></H3>

repeat <VAR>expr</VAR> evaluates <VAR>expr</VAR> repeatedly.
<HR>
<H3><A NAME = "return">
return <VAR>expr</VAR> -- return from procedure
</A></H3>

return <VAR>expr</VAR> returns from the current procedure, producing the
outcome of <VAR>expr</VAR>.
<HR>
<H3><A NAME = "suspend">
suspend <VAR>expr1</VAR> do <VAR>expr2</VAR> -- suspend from procedure
</A></H3>

suspend <VAR>expr1</VAR> do <VAR>expr2</VAR> suspends from the current procedure,
producing each result generated by <VAR>expr1</VAR>.  If suspend is resumed,
<VAR>expr2</VAR> is evaluated before resuming <VAR>expr1</VAR>.
The <CODE>do</CODE> clause is optional.
<HR>
<H3><A NAME = "until">
until <VAR>expr1</VAR> do <VAR>expr2</VAR> -- loop until result
</A></H3>

until <VAR>expr1</VAR> do <VAR>expr2</VAR> evaluates <VAR>expr2</VAR> each
time <VAR>expr1</VAR> fails; it fails when <VAR>expr1</VAR> succeeds.
The <CODE>do</CODE> clause is optional.
<HR>
<H3><A NAME = "while">
while <VAR>expr1</VAR> do <VAR>expr2</VAR> -- loop while result
</A></H3>

while <VAR>expr1</VAR> do <VAR>expr2</VAR> evaluates <VAR>expr2</VAR> each
time <VAR>expr1</VAR> succeeds; it fails when <VAR>expr1</VAR> fails.
The <CODE>do</CODE> clause is optional.
<HR>
<H3><A NAME = "alternate">
<VAR>expr1</VAR> | <VAR>expr2</VAR> : x1, x2, ... -- evaluate alternatives
</A></H3>

<VAR>expr1</VAR> | <VAR>expr2</VAR> generates the results for <VAR>expr1</VAR>
followed by the results for <VAR>expr2</VAR>.
<HR>
<H3><A NAME = "repeat_alternate">
|<VAR>expr</VAR> -- evaluate repeatedly
</A></H3>

|<VAR>expr</VAR> generates the results for <VAR>expr</VAR>
repeatedly, terminating if <VAR>expr</VAR> fails.
<HR>
<H3><A NAME = "limit">
<VAR>expr</VAR> \ i : x1, x2, ..., xi -- limit generator
</A></H3>

<VAR>expr</VAR> \ i generates at most i results from the outcome for
<VAR>expr</VAR>.
<HR>
<H3><A NAME = "scan">
x ? <VAR>expr</VAR> : x -- scan string
</A></H3>

x ? <VAR>expr</VAR> saves the current subject and position and then sets them to
the values of x and 1, respectively.  It then evaluates <VAR>expr</VAR>.  The
outcome is the outcome of <VAR>expr</VAR>.  The saved values of the subject and
position are restored on exit from <VAR>expr</VAR>.
<H6><A HREF = "ref.htm">[Back to contents page]</A></H6>
</BODY></HTML>
