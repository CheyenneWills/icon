<!doctype html public "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<TITLE>Icon Programming Language Operations (infix 2)</TITLE>
<LINK REL="STYLESHEET" TYPE="text/css" HREF="../istyle.css">
</HEAD><BODY>
<H2>Details of Icon Infix Operations (part 2)</H2>
<H6><A HREF = "ref.htm">[Back to contents page]</A></H6>
<HR>
<H3><A NAME = "assign">
x1 := x2 : x1 -- assign value
</A></H3>

x1 := x2 assigns the value of x2 to x1 and produces the variable x1.
<PRE>
See also: <A HREF = "#aug_assign">x1 <var>op</var>:= x2</A>, <A HREF = "#exchange">x1 :=: x2</A>, <A HREF = "#rev_assign">x1 &lt;- x2</A>, and <A HREF = "#rev_exchange">x1 &lt;-&gt; x2</A>
</PRE>
<HR>
<H3><A NAME = "aug_assign">
x1 <VAR>op</VAR>:= x2 : x1 -- augmented assignment
</A></H3>

x1 <VAR>op</VAR>:= x2 performs the operation x1 <VAR>op</VAR> x2 and
assigns the result to x1; it produces the variable x1.  There are augmented
assignment operators for all infix operations except assignment operations.
<PRE>
See also: <A HREF = "#assign">x1 := x2</A>
</PRE>
<HR>
<H3><A NAME = "exchange">
x1 :=: x2 : x1 -- exchange values
</A></H3>

x1 :=: x2 exchanges the values of x1 and x2 and produces the variable x1.
<PRE>
See also: <A HREF = "#assign">x1 := x2</A> and <A HREF = "#rev_exchange">x1 &lt;-&gt; x2</A>
</PRE>
<HR>
<H3><A NAME = "rev_assign">
x1 &lt;- x2 : x1 -- assign value reversibly
</A></H3>

x1 &lt;- x2 assigns the value of x2 to x1 and produces the variable x1.  It
reverses the assignment if resumed.
<PRE>
See also: <A HREF = "#assign">x1 := x2</A> and <A HREF = "#rev_exchange">x1 &lt;-&gt; x2</A>
</PRE>
<HR>
<H3><A NAME = "rev_exchange">
x1 &lt;-&gt; x2 : x1 -- exchange values reversibly
</A></H3>

x1 &lt;-&gt; x2 exchanges the values of x1 and x2 and produces the variable x1.  It
reverses the assignment if resumed.
<PRE>
See also: <A HREF = "#rev_assign">x1 &lt;- x2</A> and <A HREF = "#exchange">x1 :=: x2</A>
</PRE>
<HR>
<H3><A NAME = "to_by">
i1 to i2 by i3 : i1, ..., in -- generate integers in sequence
</A></H3>

i1 to i2 by i3 generates the sequence of integers from i1 to i2 in
increments of i3.

<PRE>
Default:
i3      1 if <CODE>by</CODE> clause omitted

See also: <A HREF = "funcsz.htm#seq">seq()</A>
</PRE>
<HR>
<H3><A NAME = "create_list">
[x1, x2, ..., xn] : L -- create list
</A></H3>

[x1, x2, ..., xn] produces a list containing the values x1, x2, ..., xn.
[] produces an empty list.
<PRE>
See also: <A HREF = "funcko.htm#list">list()</A>
</PRE>
<HR>
<H3><A NAME = "subscript">
x1[x2] : x3 -- subscript
</A></H3>

If x1 is a string, x[x2] produces a one-character string consisting of
character x2 of x1.  x1[x2] fails if x2 is out of range.  x1[x2] produces
a variable if x1 is a variable.<P>

If x1 is a list, x1[x2] produces element x2 of x1.<P>

If x1 is a record, x1[x2] produces a field of x1 according to x2: if
x2 is an integer, the x2th field is produced; if x2 is a string, the field
named by the value of x2 is produced.<P>

If x1 is a table, x1[x2] produces the element corresponding to key x2 of x1.<P>

In all cases, x2 may be nonpositive.<P>

In all cases, the subscripting operation fails if the subscript is out of range.
<PRE>
See also: <A HREF = "#section">x[i1:i2]</A>, <A HREF = "#section_plus">x[i1+:i2]</A>, and <A HREF = "#section_minus">x[i1-:i2]</A>
</PRE>
<HR>
<H3><A NAME = "section">
x1[i1:i2] : x2 -- produce substring or list section
</A></H3>

If x1 is a string, x1[i1:i2] produces the substring of x1 between i1 and i2.
x1[i1:i2] produces a variable of x1 is a variable.<P>

If x1 is a list, x1[i1:i2] produces a list consisting of the values of x1 in the
given range.<P>

In either case, i1 and i2 may be nonpositive.<P>

In either case, the subscripting operation fails if a subscript is out of range.
<PRE>
See also: <A HREF = "#subscript">x[i]</A>, <A HREF = "#section_plus">x[i1+:i2]</A>, and <A HREF = "#section_minus">x[i1-:i2]</A>
</PRE>
<HR>
<H3><A NAME = "section_plus">
x1[i1+:i2] : x2 -- produce substring or list section
</A></H3>

If x1 is a string, x1[i1+:i2] produces the substring of x1 between i1 and i1 + i2.
x1[i1+:i2] produces a variable of x1 is a variable.<P>

If x1 is a list, x1[i1+:i2] produces a list consisting of the values of x1 in the
given range.<P>

In either case, i1 and i2 may be nonpositive.<P>

In either case, the subscripting operation fails if a subscript is out of range.
<PRE>
See also: <A HREF = "#subscript">x[i]</A>, <A HREF = "#section">x[i1:i2]</A>, and <A HREF = "#section_minus">x[i1-:i2]</A>
</PRE>
<HR>
<H3><A NAME = "section_minus">
x1[i1-:i2] : x2 -- produce substring or list section
</A></H3>

If x1 is a string, x1[i1-:i2] produces the substring of x1 between i1 and i1 - i2.
x1[i1-:i2] produces a variable of x1 is a variable.<P>

If x1 is a list, x1[i1-:i2] produces a list consisting of the values of x1 in the
given range.<P>

In either case, i1 and i2 may be nonpositive.<P>

In either case, the subscripting operation fails if a subscript is out of range.
<PRE>
See also: <A HREF = "#subscript">x[i]</A>, <A HREF = "#section">x[i1:i2]</A>, and <A HREF = "#section_plus">x[i1+:i2]</A>
</PRE>
<H6><A HREF = "ref.htm">[Back to contents page]</A></H6>
</BODY></HTML>
