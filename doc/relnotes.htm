<!doctype html public "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
    <TITLE>Release Notes for Version 9.5.cvs of Icon</TITLE>
    <LINK REL="STYLESHEET" TYPE="text/css" HREF="istyle.css">
    <LINK REL="SHORTCUT ICON" HREF="shortcut.gif">
</HEAD>
<BODY>

<P><A HREF="http://www.cs.arizona.edu/icon/"> <IMG SRC="wwwcube.gif"
ALT="[Icon home]" WIDTH=128 HEIGHT=144 BORDER=0 ALIGN=RIGHT> </A>

<H1> Release Notes for Version 9.5.cvs of Icon </H1>

<P> Gregg M. Townsend
<BR> <SMALL> Department of Computer Science </SMALL>
<BR> <SMALL> The University of Arizona </SMALL>

<P> <SMALL>
<B>(work in progress)</B> <!-- www.cs.arizona.edu/icon/v950/relnotes.htm -->
<BR> Last updated April 28, 2013</SMALL>
<!-- $Id$ -->


<H2> Introduction </H2>

<P> These notes document
<UL>
<LI>changes to the Icon source tree since the last release
<LI>cumulative earlier amendments of the Icon language and graphics books
</UL>


<H2> Changes in version 9.5.cvs </H2>

<P> Notable changes in this latest version are listed here.
Some code cleanup work and documentation editing
has also been done.

<H3> Dynamic Record Construction (proposed)</H3>

<P><EM>This feature is under consideration but not yet implemented.
<BR>The following tentative specification is subject to change.</EM>

<P> A new built-in function <CODE>constructor()</CODE>
produces a new record constructor.
This in turn allows the creation of records with field names that
are computed at execution time.
Record constructors are remembered and reused;
multiple calls with the same specification all return the same
constructor function.

<P> Here is a simple example:
    <BLOCKQUOTE>
    	point := constructor("point", "x", "y")
	<BR>vector := constructor("vector", "origin", "angle")
	<BR>p := point(5.0, 3.0)
	<BR>v := vector(p, &pi/3)
	<BR>write(v.origin.x, " ", v.origin.y, " ", v.angle)
    </BLOCKQUOTE>

<P> This function specification follows the form of Appendix D of the Icon book:
    <BLOCKQUOTE>
	
	<P><CODE><B>constructor(x, L) : p ...</B></CODE>
	&mdash; produce record constructor functions

	<P><CODE>constructor(x, L)</CODE> returns a record constructor,
	or generates a sequence of them, depending on the types of
	<CODE>s</CODE> and <CODE>L</CODE>.

	<P>If <CODE>x</CODE> is a string and <CODE>L</CODE> a list,
	<CODE>constructor(s, L)</CODE> returns a record constructor
	with name <CODE>s</CODE>
	for creating records with the field names specified by list
	<CODE>L</CODE>.
	The constructor and field names must each
	have the form of an identifier.

	<P><CODE>constructor(s, s1, s2, ..., sn)</CODE> is treated as
	equivalent to <CODE>constructor(s, [s1, s2, ..., sn])</CODE>.

	<P><CODE>constructor(s)</CODE>, with <CODE>L</CODE> null or omitted,
	generates (in unspecified order)
	the existing constructors that match name <CODE>s</CODE>.

	<P><CODE>constructor()</CODE>, with <CODE>x</CODE> null or omitted,
	generates (in unspecified order) all existing constructors.

	<P><CODE>constructor(R)</CODE> returns the record constructor
	associated with record <CODE>R</CODE>.

	<P> Errors:
	<BR> 110 string or list expected
	<BR> 127 string or record expected
	<BR> 128 invalid identifier form

    </BLOCKQUOTE>

<P> Additionally, the existing built-in function <CODE>key()</CODE>,
which produces the keys of a table, has been enhanced:

    <BLOCKQUOTE>
	<P>
	<CODE>key(R)</CODE> produces, in order, the names of the fields
	of record or record constructor <CODE>R</CODE>.
    </BLOCKQUOTE>

<P><EM>(There may also be some sort of "join" procedure added to the IPL.)</EM>


<H3> Execution profiling </H3>

<P> An execution profile can be produced by linking with <CODE>icont &ndash;p</CODE>
and setting the environment variable <CODE>ICONPROFILE</CODE> at execution time
to specify an output file.

<P> For each line executed, the output reports timer ticks, number of visits,
filename, and line number.

<P> Output reflects the layout in memory, which is based on linkage order.
To arrange by filename, use the Unix <CODE>sort</CODE> utility
with keys <CODE>&ndash;k3,3 &ndash;k4n</CODE>.
To see the CPU hotspots, use <CODE>sort &ndash;nr | head</CODE>.

<H3> Minor Fixes </H3>

<P> A memory leak on every 25th co-expression allocation has been fixed.

<P> Pipes can now be opened in untranslated mode.

<P> A <CODE>QUIT</CODE> signal (<CODE>^\</CODE>) is now caught to produce 
a traceback message.
If profiling has been enabled, the profile report is also generated.

<H3> Library changes </H3>

<P> As usual, some files in the Icon program library have been
added or edited, but the core library files remain stable.
Notable changes include:

<PRE>
procs/itlib	Use infocmp utility if no termcap file
procs/numbers	Add quadratic mean procedure qmean(L)
procs/numbers	Fix spell(i) procedure
procs/psrecord	Fix positioning of noncircular arcs

progs/iprofl	Add program for listing source with execution profile
progs/lisp	Read from standard input after reading named file

gprogs/mandel3	Add Mandelbrot Set display
gprogs/othello	Add interactive Othello board game
gprogs/tess	Add 4-D tesseract display
</PRE>


<H2> Earlier feature additions </H2>

<P> These features appeared in earlier releases of Icon
but subsequent to publication of the Icon books.

<H3> External Values </H3>
<SMALL> (new with version 9.5.0 of Icon) </SMALL>

<P> External code incorporated by <CODE>loadfunc()</CODE> can now create
and return to Icon code opaque values that can be stored and passed
on subsequent calls.
See <A HREF="extlvals.htm">External Values</A> for more information.

<H3> Millions of colors </H3>
<SMALL> (new with version 9.4.2 of Icon) </SMALL>

<P> Icon's X-windows interface no longer limits each window to
256 colors at one time.
Median-cut quantization selects image colors when writing a GIF file.

<H3> Scriptable source files </H3>
<SMALL> (new with version 9.4.1 of Icon) </SMALL>

<P> An Icon source file can be made executable under Unix by prefixing it
with a comment line
<BLOCKQUOTE><CODE>#!/usr/bin/env icon</CODE></BLOCKQUOTE>
and setting its execute permission bit.
This uses a new <A HREF="icon.txt"><CODE>icon</CODE></A> command,
which in another form allows a small Icon program to be embedded
within a shell script.
See the <A HREF="icon.txt">man page</A> for details.
The traditional <A HREF="icont.txt"><CODE>icont</CODE></A> command
remains available when more flexibility is needed.

<H3> Path searching </H3>
<SMALL> (new with version 9.4.0 of Icon) </SMALL>

<P> Under Unix, colons (<CODE>:</CODE>) may now separate directories in the
<CODE>LPATH</CODE> and <CODE>IPATH</CODE> environment variables as an
alternative to spaces.
The Icon translator and linker search these paths when looking for
<CODE>$include</CODE> and <CODE>link</CODE> files respectively.

<P> The Icon program library is now searched automatically, but
<CODE>LPATH</CODE> and <CODE>IPATH</CODE> can still be set to control
the search order.
The effective path in each case is:
<OL>
	<LI> The current directory
	<LI> Any directories named by the environment variable
	<LI> The Icon library directory
</OL>

<P> Other changes affect the configuration of Icon at installation time
and the way executable Icon programs locate the interpreter.
These changes, which are transparent to most users, are discussed
in more detail on the <A HREF="files.htm">File Organization</A> page.

<H3> Reading directory contents </H3>
<SMALL> (new with version 9.3.2 of Icon) </SMALL>

<P> The files in a directory can be listed by opening the directory as a file.
Subsequent reads return the names of the files contained in the directory.
The names are returned in no particular order, and for Unix, the directories 
<CODE>"."</CODE> and <CODE>".."</CODE> are included.

<H3> Reading foreign text files </H3> 
<SMALL> (new with version 9.3.1 of Icon) </SMALL>

<P> The function <CODE>read()</CODE> recognizes
three kinds of line terminators when reading a file
opened in translated mode:
Windows (CR+LF), Macintosh (CR), or Unix (LF).
Consequently, text files created on one platform can be
read by an Icon program running on a different platform. 


<H2> Limitations, bugs, and problems </H2>

<SMALL> (This list has remained essentially unchanged for twenty years.
The remaining knotty problems relate to fundamental design decisions.) </SMALL>

<P> Large integers cannot be used with <CODE>i to j</CODE>,
with <CODE>seq()</CODE>, or with integer-valued keywords.

<P> Large-integer literals are constructed at run-time, so such
literals are best kept outside of loops.

<P> Conversion of a large integer to a string is quadratic
in the length of the integer.
Conversion of a very large integer may take a long time.

<P> An "evaluation stack overflow" can occur when a procedure is called
with a huge number (thousands or more) of arguments.
The capacity can be increased by setting the environment variable
<CODE>MSTKSIZE</CODE> or <CODE>COEXPSIZE</CODE>, as appropriate.

<P> Stack overflow checking uses a heuristic that is not always effective.
Stack overflow in a co-expression is especially likely to escape
detection and cause a mysterious program malfunction. 

<P> Pathologically nested structures can provoke a memory or segmentation
fault during garbage collection by reaching the stack limit.
The stack limit can be raised by the 
<CODE>limit</CODE> or <CODE>ulimit</CODE> shell command.


<P> If an expression such as <CODE> x := create <VAR>expr</VAR></CODE>
is used in a loop, and <CODE>x</CODE> is not a global variable,
uncollectable co-expressions accumulate with each iteration.
This problem can be circumvented by making <CODE>x</CODE>
a global variable or by assigning a value to <CODE>x</CODE>
before the create operation, as in 
    <BLOCKQUOTE><CODE>
	x := &amp;null <BR>
	x := create <VAR>expr</VAR>
    </CODE></BLOCKQUOTE>

<P> Integer overflow on exponentiation may not be detected during execution.
Such overflow may occur during type conversion.


<H2> Documentation </H2>

<P> See the <A HREF=docguide.htm>documentation guide</A>
for an overview of the available Icon documentation.

<P> For installation instructions, see
<A HREF=install.htm>Installing Binaries</A> or
<A HREF=build.htm>Building from Source</A> as appropriate.


<H2> Acknowledgments </H2>

<P>
Carl Sturtivant developed the <CODE>constructor()</CODE> feature.
Jafar Al-Gharaibeh supplied the co-expression fix.
David Gamey contributed the quadratic mean procedure <CODE>qmean()</CODE>
as well as a fix for <CODE>spell()</CODE>.
Greg Buchholz published the <CODE>mandel3</CODE> program in comp.lang.icon.
Chris Tenaglia contributed the <CODE>tess</CODE> program.
Will Evans provided the fix for the PostScript recorder <CODE>psrecord</CODE>.
Clint Jeffery supplied the <CODE>itlib</CODE> fix.
Phillip Thomas and Clint Jeffery modified the <CODE>lisp</code> program.

<P> <HR>

</BODY>
</HTML>
